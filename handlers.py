from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.bot import ZeroFoodBot
from builders.category_builder import CategoryMenuBuilder

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def init_handlers(bot: ZeroFoodBot) -> None:
    category_repository = bot.get_category_repository()
    builder = CategoryMenuBuilder(category_repository)

    @bot.message_handler(commands=['menu'])
    def cmd_categories(message: types.Message) -> None:
        markup: InlineKeyboardMarkup = builder.build_menu()
        bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("category_select:"))
    def process_category(callback_query: types.CallbackQuery) -> None:
        category_id: int = int(callback_query.data.split(":", 1)[1])
        category = category_repository.get_by_id(category_id)
        if category:
            response_text: str = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´{category.name}¬ª"
        else:
            response_text: str = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        bot.answer_callback_query(callback_query_id=callback_query.id, text=response_text)

    # –§—É–Ω–∫—Ü–∏—è –∞–¥–º–∏–Ω–∞ - –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
    @bot.bot.message_handler(commands=['admin_reviews'])
    def admin_reviews(message: types.Message) -> None:
        from config import ADMIN_ID
        from database import get_all_reviews

        user_id = message.from_user.id

        if user_id != ADMIN_ID:
            bot.bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        reviews = get_all_reviews()

        if not reviews:
            bot.bot.send_message(message.chat.id, "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        message_text = "üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
        for review in reviews:
            _, user_id, username, text, created_at = review
            message_text += f"üìÖ {created_at}\n"
            message_text += f"üë§ ID: {user_id}, @{username}\n"
            message_text += f"üìù –û—Ç–∑—ã–≤: {text}\n"
            message_text += "-" * 30 + "\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4096
        for i in range(0, len(message_text), max_length):
            chunk = message_text[i:i + max_length]
            bot.bot.send_message(message.chat.id, chunk)
        bot.answer_callback_query(callback_query_id=callback_query.id, text=response_text)
    
    # –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞
    @bot.bot.message_handler(commands=['review'])
    def leave_review(message: types.Message) -> None:
        user_id = message.from_user.id
        user_states[user_id] = "awaiting_review"
        bot.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –∏ –∑–∞–ø–∏—Å—å –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –æ—Ç–∑—ã–≤–æ–≤
    @bot.bot.message_handler(content_types=['text'])
    def handle_message(message: types.Message) -> None:
        user_id = message.from_user.id
        text = message.text

        if user_states.get(user_id) == "awaiting_review":
            username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
            from database import save_review
            save_review(user_id, username, text)
            bot.bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
            user_states[user_id] = None
        else:
            bot.bot.send_message(message.chat.id, "–Ø –Ω–µ –æ–∂–∏–¥–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.")
